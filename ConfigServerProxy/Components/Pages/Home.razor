@page "/"
@using System.Text.Json
@rendermode InteractiveServer
@inject IOptions<ConfigServerProxyConfig> Options;
@inject ConfigCache ConfigCache;

<PageTitle>Home</PageTitle>

<div class="container mt-4">
    <div class="row g-3 align-items-end">
        <div class="col-auto">
            <label for="appSelect" class="form-label mb-0">App</label>
            <select id="appSelect" class="form-select" @bind="selectedApp" @bind:after="OnSelectionChanged">
                <option value="">-- Select App --</option>
                @foreach (var app in Options.Value.Apps.Keys)
                {
                    <option value="@app">@app</option>
                }
            </select>
        </div>

        <div class="col-auto">
            <label for="envSelect" class="form-label mb-0">Environment</label>
            <select id="envSelect" class="form-select" @bind="selectedEnvironment" @bind:after="OnSelectionChanged">
                <option value="">-- Select Environment --</option>
                @foreach (var env in Options.Value.Environments.Keys)
                {
                    <option value="@env">@env</option>
                }
            </select>
        </div>

        <div class="col-auto">
            <label for="formatSelect" class="form-label mb-0">Format</label>
            <select id="formatSelect" class="form-select" @bind="selectedFormat" @bind:after="OnSelectionChanged">
                <option value="FullVerbose">FullVerbose</option>
                <option value="ResolvedYaml">ResolvedYaml</option>
            </select>
        </div>
    </div>

    <div class="mt-4">
        <label for="codeArea" class="form-label">Config:</label>
        <textarea id="codeArea" readonly class="form-control" style="height: 600px; font-family: 'Consolas', monospace; background: #f5f5f5; color: #222;">
@formattedCode
        </textarea>
    </div>
</div>

@code {
    private string? selectedApp;
    private string? selectedEnvironment;
    private string? selectedFormat = "FullVerbose";
    private string formattedCode = "// Select an app, environment, and format.";

    private async Task OnSelectionChanged()
    {
        if (!string.IsNullOrEmpty(selectedApp) && !string.IsNullOrEmpty(selectedEnvironment) && !string.IsNullOrEmpty(selectedFormat))
        {
            var format = Enum.Parse<ConfigFormat>(selectedFormat);
            var spec = new ConfigSpec(selectedApp, selectedEnvironment, "main", format);
            var config = await ConfigCache.GetConfig(spec);
            if (config != null && format == ConfigFormat.FullVerbose)
            {
                formattedCode = JsonSerializer.Serialize(JsonSerializer.Deserialize<JsonElement>(config), new JsonSerializerOptions
                {
                    WriteIndented = true,    
                });
            }
            else
            {
                formattedCode = config ?? "// No config found for this selection.";
            }
        }
        else
        {
            formattedCode = "// Select an app, environment.";
        }
        StateHasChanged();
    }
}