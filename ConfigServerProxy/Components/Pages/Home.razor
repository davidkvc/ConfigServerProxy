@page "/"
@using System.Text.Json
@rendermode InteractiveServer
@inject IOptions<ConfigServerProxyConfig> Options;
@inject ConfigCache ConfigCache;

<PageTitle>Home</PageTitle>

<div style="display: flex; gap: 1rem; align-items: flex-end;">
    <div>
        <select id="appSelect" @bind="selectedApp" @bind:after="OnSelectionChanged">
            <option value="">-- Select App --</option>
            @foreach (var app in Options.Value.Apps.Keys)
            {
                <option value="@app">@app</option>
            }
        </select>
    </div>

    <div>
        <select id="envSelect" @bind="selectedEnvironment" @bind:after="OnSelectionChanged">
            <option value="">-- Select Environment --</option>
            @foreach (var env in Options.Value.Environments.Keys)
            {
                <option value="@env">@env</option>
            }
        </select>
    </div>

    <div>
        <select id="formatSelect" @bind="selectedFormat" @bind:after="OnSelectionChanged">
            <option value="FullVerbose">FullVerbose</option>
            <option value="ResolvedYaml">ResolvedYaml</option>
        </select>
    </div>
</div>

<div style="margin-top: 1rem;">
    <label for="codeArea">Config:</label>
    <textarea id="codeArea" readonly style="width: 100%; height: 600px; font-family: 'Consolas', monospace; background: #f5f5f5; color: #222;">
@formattedCode
    </textarea>
</div>

@code {
    private string? selectedApp;
    private string? selectedEnvironment;
    private string? selectedFormat = "FullVerbose";
    private string formattedCode = "// Select an app, environment, and format.";

    private async Task OnSelectionChanged()
    {
        if (!string.IsNullOrEmpty(selectedApp) && !string.IsNullOrEmpty(selectedEnvironment) && !string.IsNullOrEmpty(selectedFormat))
        {
            var format = Enum.Parse<ConfigFormat>(selectedFormat);
            var spec = new ConfigSpec(selectedApp, selectedEnvironment, "main", format);
            var config = await ConfigCache.GetConfig(spec);
            if (config != null && format == ConfigFormat.FullVerbose)
            {
                formattedCode = JsonSerializer.Serialize(JsonSerializer.Deserialize<JsonElement>(config), new JsonSerializerOptions
                {
                    WriteIndented = true,    
                });
            }
            else
            {
                formattedCode = config ?? "// No config found for this selection.";
            }
        }
        else
        {
            formattedCode = "// Select an app, environment.";
        }
        StateHasChanged();
    }
}